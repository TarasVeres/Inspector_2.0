# coding=utf-8
# –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª, —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤—ñ–¥–ª–æ–≤ –∫–Ω–æ–ø–æ–∫ —Ç–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —â–æ –∑–∞ —á–∏–º —Å–ª—ñ–¥—É—î, –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ü–µ–π —Ñ–∞–π–ª
from aiogram import Bot, Dispatcher, types, executor  # —ñ–º–ø–æ—Ä—Ç–∏ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∞—ñ–æ–≥—Ä–∞–º
from aiogram.utils.callback_data import CallbackData

import reply_message  # —ñ–º–ø–æ—Ä—Ç–∏ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤
import Deleter
import Inline_Keyboard
import writer
from CheckList import initial_checklist, iter_checklist, request_defect
from Update_Sheet import update_sheet, open_json
from work_data import *

bot = Bot(Token_work, parse_mode=types.ParseMode.HTML)  # –≤–∫–∞–∑—É—î–º–æ —Ç–æ–∫–µ–Ω –≤–æ—Ä–∫ –∞–±–æ —Ç–µ—Å—Ç
dp = Dispatcher(bot)
Reply = dict()  # —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π —Å–ª–æ–≤–∞—Ä—å –≤ —è–∫–∏–π –±—É–¥–µ –∑–±–∏—Ä–∞—Ç–∏—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º
buy_callback = CallbackData('buy', 'action', 'amount') # —Ç–∏–ø –∫–æ–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏, —Ü–µ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫ –ø–æ –¥–≤—É–º —Ä—ñ–∑–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ—è–º callback –∏ checklist

@dp.message_handler(commands=['updatesheet']) # —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–æ –∫–æ–º–∞–Ω–¥—ñ /updatesheet
async def updatesheet(message: types.Message):
    if message.chat.id == message.from_user.id:
        Sheet = update_sheet()
        if str(message.from_user.id) in Sheet['Access_id']:
            await bot.send_message(chat_id=message.chat.id, text='–î–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å  /start')
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass


@dp.message_handler(commands=['shiftchange']) # —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∑–º—ñ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
async def shift_change(message: types.Message):
    if message.chat.id == message.from_user.id:
        Sheet = open_json()
        if str(message.from_user.id) in Sheet['Access_id']:
            Reply[message.chat.id]['writer_shift'] = ''
            await bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∑–º—ñ–Ω—É –≤ —è–∫—ñ–π –ø—Ä–∞—Ü—é—î—Ç–µ:')
        await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.message_handler(commands=['report']) # —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É, –ø—Ä–∏–ª—ñ—Ç–∞—î —Å–ª–æ–≤–∞—Ä—å –∑ –¥—ñ—è–º–∏ —â–æ –Ω–∞—Ç–∏—Å–∫–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á,
# –≤—ñ–Ω —Ä–æ–±–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏ —ñ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —Ç–æ–±—ñ –ø—Ä–∏–ª—ñ—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def updatesheet(message: types.Message):
    global Reply
    if message.chat.id == message.from_user.id:
        Sheet = open_json()
        if str(message.from_user.id) in Sheet['Access_id']:
            try:
                Reply[message.chat.id]['report'] = ''
                await bot.send_message(message.chat.id, text=f'–õ–æ–≥–∏ –≤–∞—à–æ—ó –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —ñ–Ω—Å–ø–µ–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω—ñ @JaneRiabtseva:\n\n'
                                                             f'{Reply[message.chat.id]}')
                await bot.send_message(message.chat.id, text=f'–î–æ–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏, —Ç–∞–∫–æ–∂ —É–∫–∞–∂—ñ—Ç—å –Ω–∞ —è–∫–æ–º—É –∑–∞—Ä–∞–∑ –µ—Ç–∞–ø—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å\n'
                                                             f'–Ø–∫—â–æ –Ω–µ –±–∞–∂–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')
            except KeyError:
                pass

@dp.message_handler(commands=['start'])  # –∫—Ä–æ–∫1 –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É start –≤–∏–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
async def start(message: types.Message):
    global Sheet, Reply
    Sheet = open_json()
    if message.chat.id == message.from_user.id:
        if str(message.chat.id) in Sheet['Access_id']:
            m_id = message.chat.id
            Reply[m_id] = dict()
            Reply[m_id]['check_photo'] = ''
            location = [i for i in Sheet['Location']]
            button = Inline_Keyboard.inline_c2_home(location)
            await bot.send_message(message.chat.id, '–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.callback_query_handler(buy_callback.filter(action='action')) # —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ª–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫, –≤—Å–µ —â–æ –π–¥–µ –¥–æ —á–µ–∫–ª–∏—Å—Ç–∞
async def callback(call: types.CallbackQuery, callback_data: dict):
    global Reply, Sheet
    button = types.InlineKeyboardMarkup(row_width=2)
    c_id = call.from_user.id
    call_data = callback_data["amount"]
    if (call_data in Sheet['Location']) and not Sheet['Location'][call_data]:  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —â–µ –ø—É—Å—Ç–∞
        await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call_data}')
        button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount='Back')))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–õ–æ–∫–∞—Ü—ñ—è —â–µ –±—É–¥—É—î—Ç—å—Å—è!', reply_markup=button)
    elif call_data in 'Back':  # –∫—Ä–æ–∫1 –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫, –æ–±–∏—Ä–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
        await call.answer(text='')
        location = [i for i in Sheet['Location']]
        button = Inline_Keyboard.inline_c2_home(location)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
    elif call_data in Sheet['Location']:  # –∫—Ä–æ–∫2 –æ–±–∏—Ä–∞—î–º–æ –ø–æ–≤–µ—Ä—Ö –∞–±–æ —Å–∫–ª–∞–¥
        await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call_data}')
        Reply[c_id]['inspector'] = Sheet['Access_id'][str(call.message.chat.id)][1]
        Reply[c_id]['shift'] = Sheet['Access_id'][str(call.message.chat.id)][2]
        Reply[c_id]['location'] = call_data
        Deleter.deleter_key('location', Reply[c_id])
        Floor = [i for i in Sheet['Location'][Reply[c_id]['location']]]
        button = Inline_Keyboard.inline_c2(Floor, 'Back')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=Reply[c_id]['location'], reply_markup=button)
    elif call_data in Sheet['Location'][Reply[c_id]['location']]: #–∫—Ä–æ–∫3 –æ–±–∏—Ä–∞—î–º–æ –¥—ñ–ª—å–Ω–∏—Ü—é –∞–±–æ –¥–µ–≤–∞–π—Å —è–∫—â–æ —Å–∫–ª–∞–¥
        await call.answer(call_data)
        Reply[c_id]['backer'] = Reply[c_id]['location']
        if 'non_district' in Sheet['Location'][Reply[c_id]['location']][call_data]:  # —è–∫—â–æ –±–µ–∑ –ø–æ–≤–µ—Ä—Ö–∞ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ –æ–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º
            Reply[c_id]['floor'] = 'non_district'
            Reply[c_id]['district'] = call_data
            Deleter.deleter_key('district', Reply[c_id])
            if call_data in Sheet['Device&Kit']:  # —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó—ó —ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫—ñ—Ç–∏ –∞–±–æ –¥–µ–≤–∞–π—Å–∏
                button.add(
                    types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data=buy_callback.new(action='action', amount='–î–µ–≤–∞–π—Å')),
                    types.InlineKeyboardButton(text='Kit', callback_data=buy_callback.new(action='action', amount='Ajax_Kit'))
                )
                button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount=Reply[c_id]['backer'])))
            else:  # –æ–±–∏—Ä–∞—î–º–æ –¥–µ–≤–∞–π—Å–∏ —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º –∞–ª–µ –Ω–µ –∫—ñ—Ç–∏
                Type_device = [i for i in Sheet['Device']]
                button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        else: # –ø–æ–≤–µ—Ä—Ö
            Reply[c_id]['floor'] = call_data
            Deleter.deleter_key('floor', Reply[c_id])
            district = [i for i in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']]]
            button = Inline_Keyboard.inline_c2(district, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif 'Ajax_Kit' in call_data: # —è–∫—â–æ –æ–±—Ä–∞–ª–∏ –Ω–µ –¥–µ–≤–∞–π—Å –∞  –∫—ñ—Ç–∏, –≤—ñ–¥–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—ñ—Ç—ñ–≤
        await call.answer(call_data)
        Reply[c_id]['type_device'] = call_data
        Deleter.deleter_key('type_device', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['district']
        Kit = [i for i in Sheet['kit']]
        button = Inline_Keyboard.inline_c2(Kit, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç –∫—ñ—Ç—ñ–≤:', reply_markup=button)
    elif call_data in Sheet['kit']: # –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫—ñ—Ç–∞ –≤—ñ–¥–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö
        await call.answer(call_data)
        Reply[c_id]['kit'] = call_data
        Deleter.deleter_key('device', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['type_device']
        SP = [i for i in Sheet['SP'][Reply[c_id]['location']][Reply[c_id]['district']]]
        button = Inline_Keyboard.inline_c2(SP, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞) –ø—Ä–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å:', reply_markup=button)
    elif '–î–µ–≤–∞–π—Å' in call_data: # —è–∫—â–æ –æ–±—Ä–∞–ª–∏ –¥–µ–≤–∞–π—Å, –≤—ñ–¥–¥–∞—î–º–æ –≤–∏–±–æ—Ä —Ç–∏–ø—É –¥–µ–≤–∞–π—Å–∞
        await call.answer(call_data)
        Reply[c_id]['backer'] = Reply[c_id]['district']
        Type_device = [i for i in Sheet['Device']]
        button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif ('non_district' not in Reply[c_id]['floor']) and (call_data in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']]):  # –∫—Ä–æ–∫4 –æ–±–∏—Ä–∞—î–º–æ —Ä–æ–±–æ—á—ñ –º—ñ—Å—Ü—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–ª—å–Ω–∏—Ü—ñ
        await call.answer(call_data)
        Reply[c_id]['district'] = call_data
        Deleter.deleter_key('district', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['floor']
        if (Reply[c_id]['district'] in Sheet['Non_place']) and (call_data not in Sheet['Device&Kit']): # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É —Ä–æ–± –º—ñ—Å—Ü—è
            Reply[c_id]['room'] = Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']][0]
            Type_device = [i for i in Sheet['Device']]
            button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        elif Reply[c_id]['district'] in Sheet['Device&Kit']: # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –º–∞—Å—Ç–µ—Ä–±–æ–∫—Å —ñ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –¥–µ–≤–∞–π—Å–∏ —á–∏ –∫—ñ—Ç–∏
            button.add(
                types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data=buy_callback.new(action='action', amount='–î–µ–≤–∞–π—Å')),
                types.InlineKeyboardButton(text='Kit', callback_data=buy_callback.new(action='action', amount='Ajax_Kit'))
            )
            button.add(
                types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount=Reply[c_id]['backer'])))
        else:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±—ñ—Ä —Ä–æ–± –º—ñ—Å—Ü—è
            Place = [i for i in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']]]
            button = Inline_Keyboard.inline_c2(Place, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif ('non_district' not in Reply[c_id]['floor']) and (call_data in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']]):  # –∫—Ä–æ–∫6 –æ–±–∏—Ä–∞—î–º–æ –ª—ñ–Ω—ñ–π–∫—É –¥–µ–≤–∞–π—Å—ñ–≤
        await call.answer(call_data)
        if call_data in '–ë–µ–∑ —Ä–æ–± –º—ñ—Å—Ü—è':
            Reply[c_id]['backer'] = Reply[c_id]['floor']
            text_message = Reply[c_id]["district"]
        else:
            Reply[c_id]['backer'] = Reply[c_id]['district']
            text_message = f'{Reply[c_id]["district"]} - {call_data}'
        Reply[c_id]['room'] = call_data
        Deleter.deleter_key('room', Reply[c_id])
        Type_device = [i for i in Sheet['Device']]
        button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text_message, reply_markup=button)
    elif call_data in Sheet['Device']:   # –∫—Ä–æ–∫7 –æ–±–∏—Ä–∞—î–º–æ –¥–µ–≤–∞–π—Å
        await call.answer(call_data)
        Reply[c_id]['type_device'] = call_data
        Deleter.deleter_key('type_device', Reply[c_id])
        if 'room' not in Reply[c_id]:
            Reply[c_id]['backer'] = Reply[c_id]['district']
        else:
            Reply[c_id]['backer'] = Reply[c_id]['room']
        if "–ë–µ–∑ –¥–µ–≤–∞–π—Å—É" in call_data:
            Reply[c_id]['device'] = call_data
            SP = [i for i in Sheet['SP'][Reply[c_id]['location']][Reply[c_id]['district']]]
            button = Inline_Keyboard.inline_c2(SP, Reply[c_id]['backer'])
            text_message = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞) –ø—Ä–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å:'
        else:
            Device = [i for i in Sheet['Device'][Reply[c_id]['type_device']]]
            button = Inline_Keyboard.inline_c2(Device, Reply[c_id]['backer'])
            text_message = call_data
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text_message, reply_markup=button)
    elif ('kit' not in Reply[c_id]) and (call_data in Sheet['Device'][Reply[c_id]['type_device']]) and (Reply[c_id]['district'] not in Sheet['Non_project']):
             # –∫—Ä–æ–∫8 –æ–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        await call.answer(call_data)
        Reply[c_id]['device'] = call_data
        Deleter.deleter_key('device', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['type_device']
        Project = [i for i in Sheet['Device'][Reply[c_id]['type_device']][Reply[c_id]['device']]]
        button = Inline_Keyboard.inline_c1(Project, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif ('kit' not in Reply[c_id]) and (call_data in Sheet['Device'][Reply[c_id]['type_device']]) or (call_data not in Sheet['SP'][Reply[c_id]['location']][Reply[c_id]['district']]) and \
        ((Reply[c_id]['district'] not in Sheet['Non_project']) and (("–ë–µ–∑ –¥–µ–≤–∞–π—Å—É" not in Reply[c_id]['device']) and
                                    (call_data in Sheet['Device'][Reply[c_id]['type_device']][Reply[c_id]['device']]))):  # –∫—Ä–æ–∫9 –æ–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ
        await call.answer(call_data)
        if Reply[c_id]['district'] in Sheet['Non_project']:
            Reply[c_id]['backer'] = Reply[c_id]['type_device']
            Reply[c_id]['device'] = call_data
        else:
            Reply[c_id]['backer'] = Reply[c_id]['device']
            Reply[c_id]['project'] = call_data
        Deleter.deleter_key('project', Reply[c_id])
        SP = [i for i in Sheet['SP'][Reply[c_id]['location']][Reply[c_id]['district']]]
        button = Inline_Keyboard.inline_c2(SP, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞) –ø—Ä–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å:', reply_markup=button)
    elif (call_data in Sheet['SP'][Reply[c_id]['location']][Reply[c_id]['district']]) and (call_data not in "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É"):
        # –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–µ –ø—Ä–æ—Ö–æ–¥—É –ø–æ —á–µ–∫–ª–∏—Å—Ç—É
        await call.answer(call_data)
        if (('device' in Reply[c_id]) and (Reply[c_id]['device'] in "–ë–µ–∑ –¥–µ–≤–∞–π—Å—É")) or ('project' not in Reply[c_id]):
            Reply[c_id]['backer'] = Reply[c_id]['type_device']
        else:
            Reply[c_id]['backer'] = Reply[c_id]['project']
        Reply[c_id]['sp'] = call_data
        await initial_checklist(Reply[c_id], Sheet, call)
    elif call_data in "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É": #—è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É —Ç–æ –≤–Ω–æ—Å–∏–º–æ –≤—Ä—É—á–Ω—É
        await call.answer()
        if 'project' in Reply[c_id]:
            Reply[c_id]['backer'] = Reply[c_id]['project']
        else:
            Reply[c_id]['backer'] = Reply[c_id]['device']
        Reply[c_id]['sp'] = "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É"
        button.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action',
                                                                                         amount=Reply[c_id]['backer'])))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ–≥–æ –ø—Ä–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å:', reply_markup=button)
    elif 'change_photo' in call_data: # –∑–º—ñ–Ω–∞ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫—â–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–º–∏–ª–∫–æ–≤–æ –Ω–µ —Ç–µ
        await call.answer()
        Reply[c_id]['check_photo'] = ''
        button.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='checklist',
                                                                                         amount='backer_photo')))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ', reply_markup=button)
    elif call_data in 've_chat': # –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –≤ —á–∞—Ç –∑ –∑–∞–ø–∏—Å–æ–º –≤ —Ç–∞–±–ª–∏—Ü—é
        await call.answer()
        Reply[c_id]['ve_chat'] = True
        await reply_message.message_ve_chat(Reply[c_id], Chat_work)
        Reply[c_id] = dict()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –≤ —á–∞—Ç —Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–µ –≤ —Ç–∞–±–ª–∏—Ü—é.')
    elif call_data in 'no_ve_chat': # –≤—ñ–¥–º—ñ–Ω–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—é
        await call.answer()
        Reply[c_id] = dict()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ó–∞–ª–∏—à–∏–º–æ –¥–∞–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç')


@dp.callback_query_handler(buy_callback.filter(action='checklist')) # –≤—ñ–¥–ª–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫ –∫–æ–ª–∏ –π–¥–µ–º–æ –ø–æ —á–µ–∫–ª–∏—Å—Ç—É
async def callback(call: types.CallbackQuery, callback_data: dict):
    global Reply, Sheet, Request, Request_defect
    c_id = call.from_user.id
    call_data = callback_data['amount'].replace('[', '').replace(']', '').split(', ')
    button = types.InlineKeyboardMarkup()
    if  call_data[0] in "'OK'": # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–∫
        await call.answer(call_data[0])
        Reply[c_id]['checklist']['log'].append('OK')
        Reply[c_id]['checklist']['Time_inspection'] += [call_data[1]]
        Reply[c_id]['checklist']['Rating'] += [call_data[2]]
        Reply[c_id]['checklist']['Rating_all'] += [call_data[2]]
        Deleter.deleter_backer_checklist(Reply[c_id])
        await iter_checklist(Reply[c_id], Sheet, call)
    elif call_data[0] in "'NOK'": # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–æ–∫
        await call.answer(call_data[0])
        Reply[c_id]['check_photo'] = ''
        Reply[c_id]['checklist']['log'].append('NOK')
        Reply[c_id]['checklist']['Time_inspection'] += [call_data[1]]
        Reply[c_id]['checklist']['Rating_all'] += [call_data[2]]
        Deleter.deleter_backer_checklist(Reply[c_id])
        button.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='checklist', amount='backer_photo')))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ", reply_markup=button)
    elif call_data[0] in "'N/A'": # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å N/A
        await call.answer(call_data[0])
        Reply[c_id]['checklist']['log'].append('N/A')
        Deleter.deleter_backer_checklist(Reply[c_id])
        await iter_checklist(Reply[c_id], Sheet, call)
    elif ('backer_checklist' in call_data[0]) or ('backer_photo' in call_data[0]): # —è–∫—â–æ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ö–æ–¥—É –ø–æ —á–µ–∫–ª–∏—Å—Ç—É –Ω–∞ —è–∫–æ–º—É—Å—å –ø–∏—Ç–∞–Ω–Ω—é –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥
        await call.answer()
        if Reply[c_id]['checklist']['log'][-1] == 'OK':
            Reply[c_id]['checklist']['Time_inspection'].pop()
            Reply[c_id]['checklist']['Rating_all'].pop()
            Reply[c_id]['checklist']['Rating'].pop()
        elif Reply[c_id]['checklist']['log'][-1] == 'NOK':
            Reply[c_id]['checklist']['Time_inspection'].pop()
            Reply[c_id]['checklist']['Rating_all'].pop()
        Reply[c_id]['checklist']['log'].pop()
        if 'backer_checklist' in call_data[0]:
            Reply[c_id]['checklist']['index_count'] -= 2
        elif 'backer_photo' in call_data[0]:
            Reply[c_id]['checklist']['index_count'] -= 1
        await iter_checklist(Reply[c_id], Sheet, call)
    elif 'checklist_text' in call_data[0]: # –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –ø—ñ—Å–ª—è –æ–ø–∏—Å—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        await call.answer()
        Request_defect, output_defect_message = request_defect(Reply[c_id])
        Request = Reply[c_id]['checklist']
        Request[Request_defect]['text'] = ''
        button.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action',
                                                                                         amount='change_photo')))
        await bot.send_message(chat_id=call.message.chat.id, text='–ó—Ä–æ–±—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:', reply_markup=button)
    elif call_data[0] in Sheet['Location'][Reply[c_id]['location']]: # –æ–±—ñ—Ä –ø–æ–≤–µ—Ä—Ö—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
        await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call_data[0]}')
        Request_defect, output_defect_message = request_defect(Reply[c_id])
        Request = Reply[c_id]['checklist']
        if 'non_district' in Sheet['Location'][Reply[c_id]['location']][call_data[0]]:  # —è–∫—â–æ –±–µ–∑ –ø–æ–≤–µ—Ä—Ö–∞ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ –æ–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º
            Request[Request_defect]['floor'] = 'non_district'
            Request[Request_defect]['district'] = call_data[0]
            await iter_checklist(Reply[c_id], Sheet, call)
        else:
            Request[Request_defect]['floor'] = call_data[0]
            District = [i for i in Sheet['Location'][Reply[c_id]['location']][Request[Request_defect]['floor']]]
            button = Inline_Keyboard.inline_c2Checklist(District, 'checklist_text')
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data[0], reply_markup=button)
    elif call_data[0] in Sheet['Location'][Reply[c_id]['location']][Request[Request_defect]['floor']]: #–∫—Ä–æ–∫3 –æ–±–∏—Ä–∞—î–º–æ –¥—ñ–ª—å–Ω–∏—Ü—é –∞–±–æ –¥–µ–≤–∞–π—Å–∞ —è–∫—â–æ —Å–∫–ª–∞–¥
        await call.answer(call_data[0])
        Request[Request_defect]['backer'] = Request[Request_defect]['floor']
        Request[Request_defect]['district'] = call_data[0]
        await iter_checklist(Reply[c_id], Sheet, call)

@dp.message_handler(content_types=['text']) # –≤—ñ–¥–ª–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_files(message):
    try:
        if message.chat.id == message.from_user.id:
            Sheet = open_json()
            if str(message.chat.id) in Sheet['Access_id']:
                m_id = Inline_Keyboard.func_message(message)[0]
                text = Inline_Keyboard.func_message(message)[1]
                if 'report' in Reply[m_id]: # –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —ñ –≤–∫–∞–∑–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å—É —ó—ó
                    Reply[m_id]['report'] = text
                    await bot.send_message(message.chat.id, text='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.')
                    await bot.send_message(chat_id=207451670, text=Reply[m_id])
                elif "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É" in Reply[m_id]['sp']: # —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å–ø —è–∫–∏–π –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ —Å–ø–∏—Å–∫—É
                    Reply[m_id]['sp'] = text
                    await initial_checklist(Reply[m_id], Sheet, call=message)
                elif ('checklist' in Reply[m_id]) and ('photos'in Reply[m_id]['checklist'][Reply[m_id]['checklist']['Request_message'][len(Reply[m_id]['checklist']['log'])-1].split('\n')[2]]):
                    # –æ–ø–∏—Å –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                    Request_defect, output_defect_message = request_defect(Reply[m_id])
                    if Reply[m_id]['checklist'][Request_defect]['text'] == '':
                        Reply[m_id]['checklist'][Request_defect]['text'] = text
                        Reply[m_id]['checklist'][Request_defect]['floor'] = ''
                        Floor = [i for i in Sheet['Location'][Reply[m_id]['location']]]
                        Reply[m_id]['backer'] = 'checklist_text'
                        button = Inline_Keyboard.inline_c2Checklist(Floor, Reply[m_id]['backer'])
                        await bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –¥—ñ–ª—å–Ω–∏—Ü—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:', reply_markup=button)
                elif 'writer_shift' in Reply[m_id]:
                    writer.writer_shift(Reply[m_id], text, Sheet)
                    Reply[m_id]['inspector'] = Sheet['Access_id'][str(message.chat.id)][1]
                    post = f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n{Reply[m_id]['inspector']} - {text} –∑–º—ñ–Ω–∞."
                    await bot.send_message(chat_id=message.chat.id, text=post)
    except KeyError:
        pass


@dp.message_handler(content_types=['video', 'photo']) # –≤—ñ–¥–ª–æ–≤ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
async def start_function(message: types.Message):
    global Request_defect
    if message.chat.id == message.from_user.id:
        if str(message.chat.id) in Sheet['Access_id']:
            m_id = message.chat.id
            if ('checklist' in Reply[m_id]) and (Reply[m_id]['checklist']['log'][-1] == 'NOK'):
                if Reply[m_id]['check_photo'] == '':
                    Request_defect, output_defect_message = request_defect(Reply[m_id])
                    Reply[m_id]['checklist'][Request_defect] = dict()
                    Reply[m_id]['checklist'][Request_defect]['output_defect_message'] = output_defect_message
                    Reply[m_id]['checklist'][Request_defect]['photos'] = []
                    Reply[m_id]['checklist'][Request_defect]['videos'] = []
                    Reply[m_id]['checklist'][Request_defect]['med'] = []
                    Reply[m_id]['checklist'][Request_defect]['text'] = ''
                try:
                    Reply[m_id]['checklist'][Request_defect]['photos'].append(message.photo[0].file_id)
                except (KeyError, IndexError):
                    pass
                try:
                    Reply[m_id]['checklist'][Request_defect]['videos'].append(message.video.file_id)
                except AttributeError:
                    pass
                    if Reply[m_id]['check_photo'] == '':
                        Reply[m_id]['check_photo'] = message.media_group_id
                        button = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ',
                                 callback_data=buy_callback.new(action='action', amount='change_photo')),
                                 types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='checklist', amount='backer_photo')))
                        await bot.send_message(message.chat.id, text='–ó—Ä–æ–±—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:',
                                               reply_markup=button)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, timeout=False)
