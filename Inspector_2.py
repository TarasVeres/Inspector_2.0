# coding=utf-8
from aiogram import Bot, Dispatcher, types, executor
from aiogram.utils.callback_data import CallbackData
import pprint

import writer
import Deleter
import Inline_Keyboard
import assembler_message
from CheckList import initial_checklist, iter_checklist
from Update_Sheet import update_sheet, open_json

Token_work = '5388966053:AAE6rJo_7wbBbGDMG3QntbjN549Ym1lyEgY'
Chat_work = '-1001286473377'

Token_test = '5182014508:AAEBytjLM9Gu-3F2o1Qc2QPt5bwdvNWxFEk'
Chat_test = '-1001626029923'

bot = Bot(Token_test, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
Reply = dict()
buy_callback = CallbackData('buy', 'action', 'amount')

@dp.message_handler(commands=['updatesheet'])
async def updatesheet(message: types.Message):
    if message.chat.id == message.from_user.id:
        Sheet = update_sheet()
        if str(message.from_user.id) in Sheet['Access_id']:
            await bot.send_message(chat_id=message.chat.id, text='–î–∞–Ω–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ.')
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.message_handler(commands=['start'])  # –∫—Ä–æ–∫1 –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É start –≤–∏–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
async def start(message: types.Message):
    global Sheet, Reply
    Sheet = open_json()
    if message.chat.id == message.from_user.id:
        if str(message.chat.id) in Sheet['Access_id']:
            m_id = message.chat.id
            Reply[m_id] = dict()
            location = [i for i in Sheet['Location']]
            button = Inline_Keyboard.inline_c2_home(location)
            await bot.send_message(message.chat.id, '–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.callback_query_handler(buy_callback.filter(action='action'))
async def callback(call: types.CallbackQuery, callback_data: dict):
    global Reply, Sheet
    button = types.InlineKeyboardMarkup(row_width=2)
    c_id = call.from_user.id
    call_data = callback_data["amount"]
    if (call_data in Sheet['Location']) and not Sheet['Location'][call_data]:  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —â–µ –ø—É—Å—Ç–∞
        await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call_data}')
        button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount='Back')))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–õ–æ–∫–∞—Ü—ñ—è —â–µ –±—É–¥—É—î—Ç—å—Å—è!', reply_markup=button)
    elif call_data in 'Back':  # –∫—Ä–æ–∫1 –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫, –æ–±–∏—Ä–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
        await call.answer(text='')
        location = [i for i in Sheet['Location']]
        button = Inline_Keyboard.inline_c2_home(location)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text='–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
    elif call_data in Sheet['Location']:  # –∫—Ä–æ–∫2 –æ–±–∏—Ä–∞—î–º–æ –ø–æ–≤–µ—Ä—Ö –∞–±–æ —Å–∫–ª–∞–¥
        await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call_data}')
        Reply[c_id]['location'] = call_data
        Deleter.deleter_key('location', Reply[c_id])
        Floor = [i for i in Sheet['Location'][Reply[c_id]['location']]]
        button = Inline_Keyboard.inline_c2(Floor, 'Back')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=Reply[c_id]['location'], reply_markup=button)
    elif (call_data in Sheet['Location'][Reply[c_id]['location']]): #–∫—Ä–æ–∫3 –æ–±–∏—Ä–∞—î–º–æ –¥—ñ–ª—å–Ω–∏—Ü—é –∞–±–æ –¥–µ–≤–∞–π—Å–∞ —è–∫—â–æ —Å–∫–ª–∞–¥
        await call.answer(call_data)
        Reply[c_id]['backer'] = Reply[c_id]['location']
        if 'non_district' in Sheet['Location'][Reply[c_id]['location']][call_data]:  # —è–∫—â–æ –±–µ–∑ –ø–æ–≤–µ—Ä—Ö–∞ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ –æ–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º
            Reply[c_id]['floor'] = 'non_district'
            Reply[c_id]['district'] = call_data
            Deleter.deleter_key('district', Reply[c_id])
            if call_data in Sheet['Device&Kit']:  # —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó—ó —ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫—ñ—Ç–∏ –∞–±–æ –¥–µ–≤–∞–π—Å–∏
                button.add(
                    types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data=buy_callback.new(action='action', amount='–î–µ–≤–∞–π—Å')),
                    types.InlineKeyboardButton(text='Kit', callback_data=buy_callback.new(action='action', amount='Ajax_Kit'))
                )
                button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount=Reply[c_id]['backer'])))
            else:  # –æ–±–∏—Ä–∞—î–º–æ –¥–µ–≤–∞–π—Å–∏ —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º –∞–ª–µ –Ω–µ –∫—ñ—Ç–∏
                Type_device = [i for i in Sheet['Device']]
                button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        else: # –ø–æ–≤–µ—Ä—Ö
            Reply[c_id]['floor'] = call_data
            Deleter.deleter_key('floor', Reply[c_id])
            district = [i for i in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']]]
            button = Inline_Keyboard.inline_c2(district, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif call_data in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']]:  # –∫—Ä–æ–∫4 –æ–±–∏—Ä–∞—î–º–æ —Ä–æ–±–æ—á—ñ –º—ñ—Å—Ü—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–ª—å–Ω–∏—Ü—ñ
        await call.answer(call_data)
        Reply[c_id]['district'] = call_data
        Deleter.deleter_key('district', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['floor']
        if Reply[c_id]['district'] in Sheet['Non_place']: # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É —Ä–æ–± –º—ñ—Å—Ü—è
            Reply[c_id]['room'] = Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']][0]
            Deleter.deleter_key('room', Reply[c_id])
            Type_device = [i for i in Sheet['Device']]
            button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        elif Reply[c_id]['district'] in Sheet['Device&Kit']: # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –º–∞—Å—Ç–µ—Ä–±–æ–∫—Å —ñ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –¥–µ–≤–∞–π—Å–∏ —á–∏ –∫—ñ—Ç–∏
            button.add(
                types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data=buy_callback.new(action='action', amount='–î–µ–≤–∞–π—Å')),
                types.InlineKeyboardButton(text='Kit', callback_data=buy_callback.new(action='action', amount='Ajax_Kit'))
            )
            button.add(
                types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=buy_callback.new(action='action', amount=Reply[c_id]['backer'])))
        else:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±—ñ—Ä —Ä–æ–± –º—ñ—Å—Ü—è
            Place = [i for i in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']]]
            button = Inline_Keyboard.inline_c2(Place, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif call_data in Sheet['Location'][Reply[c_id]['location']][Reply[c_id]['floor']][Reply[c_id]['district']]:  # –∫—Ä–æ–∫6 –æ–±–∏—Ä–∞—î–º–æ –ª—ñ–Ω—ñ–π–∫—É –¥–µ–≤–∞–π—Å—ñ–≤
        await call.answer(call_data)
        Reply[c_id]['backer'] = Reply[c_id]['district']
        Reply[c_id]['room'] = call_data
        Deleter.deleter_key('room', Reply[c_id])
        Type_device = [i for i in Sheet['Device']]
        button = Inline_Keyboard.inline_c2(Type_device, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'{Reply[c_id]["district"]} - {call_data}', reply_markup=button)
    elif call_data in Sheet['Device']:   # –∫—Ä–æ–∫7 –æ–±–∏—Ä–∞—î–º–æ –¥–µ–≤–∞–π—Å
        await call.answer(call_data)
        Reply[c_id]['type_device'] = call_data
        Deleter.deleter_key('type_device', Reply[c_id])
        Reply[c_id]['text_message'] = call_data
        if 'kl_rm' in Reply[c_id]:
            Reply[c_id]['backer'] = Reply[c_id]['kl_rm']
        else:
            Reply[c_id]['backer'] = Reply[c_id]['room']
        if "–ë–µ–∑ –¥–µ–≤–∞–π—Å—É" in call_data:
            await initial_checklist(Reply[c_id], Sheet, call)
        else:
            Device = [i for i in Sheet['Device'][Reply[c_id]['type_device']]]
            button = Inline_Keyboard.inline_c2(Device, Reply[c_id]['backer'])
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif call_data in Sheet['Device'][Reply[c_id]['type_device']]:  # –∫—Ä–æ–∫8 –æ–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        await call.answer(call_data)
        Reply[c_id]['device'] = call_data
        Deleter.deleter_key('device', Reply[c_id])
        Reply[c_id]['backer'] = Reply[c_id]['type_device']
        Project = [i for i in Sheet['Device'][Reply[c_id]['type_device']][Reply[c_id]['device']]]
        button = Inline_Keyboard.inline_c1(Project, Reply[c_id]['backer'])
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)
    elif call_data in Sheet['Device'][Reply[c_id]['type_device']][Reply[c_id]['device']]:  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        await call.answer(call_data)
        Reply[c_id]['backer'] = Reply[c_id]['device']
        Reply[c_id]['project'] = call_data
        Deleter.deleter_key('project', Reply[c_id])
        button.add(types.InlineKeyboardButton(text='Nazad', callback_data=buy_callback.new(action='action', amount=Reply[c_id]['backer'])))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=call_data, reply_markup=button)

@dp.callback_query_handler(buy_callback.filter(action='checklist'))
async def callback(call: types.CallbackQuery, callback_data: dict):
    global Reply, Sheet
    try:
        c_id = call.from_user.id
        call_data = callback_data['amount'].replace('[', '').replace(']', '').split(', ')
        if  call_data[0] in "'OK'":
            await call.answer(call_data[0])
            Reply[c_id]['checklist']['Time_inspection'] += call_data[1]
            Reply[c_id]['checklist']['Rating'] += call_data[2]
            await iter_checklist(Reply[c_id], Sheet, call)
        elif call_data[0] in "'NOK'":
            await call.answer(call_data[0])
            Reply[c_id]['checklist']['Time_inspection'] += call_data[1]
            await iter_checklist(Reply[c_id], Sheet, call)
        elif call_data[0] in "'N/A'":
            await call.answer(call_data[0])
            await iter_checklist(Reply[c_id], Sheet, call)
        # elif 'backer' in call.message.text:
        pprint.pprint(Reply)
    except ZeroDivisionError:
        pass



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, timeout=False)
