# coding=utf-8

from aiogram import Bot, Dispatcher, types, executor

import writer
import Deleter
import Inline_Keyboard
import assembler_message
from Update_Sheet import update_sheet, open_json

Token_work = '5388966053:AAE6rJo_7wbBbGDMG3QntbjN549Ym1lyEgY'
Chat_work = '-1001286473377'

Token_test = '5182014508:AAEBytjLM9Gu-3F2o1Qc2QPt5bwdvNWxFEk'
Chat_test = '-1001626029923'

bot = Bot(Token_test, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
Reply_message = dict()


@dp.message_handler(commands=['updatesheet'])
async def updatesheet(message: types.Message):
    if message.chat.id == message.from_user.id:
        Sheet = update_sheet()
        if str(message.from_user.id) in Sheet['Access_id']:
            await bot.send_message(chat_id=message.chat.id, text='–î–∞–Ω–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ.')
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.message_handler(commands=['start'])  # –∫—Ä–æ–∫1 –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É start –≤–∏–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±—ñ—Ä –ª–æ–∫–∞—Ü—ñ—ó
async def start(message: types.Message):
    global Sheet, reply_message
    Sheet = open_json()
    if message.chat.id == message.from_user.id:
        if str(message.chat.id) in Sheet['Access_id']:
            m_id = message.chat.id
            Reply_message[m_id] = dict()
            location = [i for i in Sheet['Location']]
            button = Inline_Keyboard.inline_c2_home(location)
            await bot.send_message(message.chat.id, '–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
        else:
            await bot.send_message(message.chat.id, '–ù–∞–∂–∞–ª—å, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!üò¢')
    else:
        pass

@dp.callback_query_handler(lambda callback_query: True)
async def callback(call: types.CallbackQuery):
    global Reply_message, Sheet
    button = types.InlineKeyboardMarkup(row_width=2)
    try:
        c_id = call.from_user.id
        if (call.data in Sheet['Location']) and not Sheet['Location'][call.data]:  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —è–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —â–µ –ø—É—Å—Ç–∞
            await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call.data}')
            button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='Back'))
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–õ–æ–∫–∞—Ü—ñ—è —â–µ –±—É–¥—É—î—Ç—å—Å—è!', reply_markup=button)
        elif call.data in 'Back':  # –∫—Ä–æ–∫1 –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫, –æ–±–∏—Ä–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
            await call.answer(text='')
            location = [i for i in Sheet['Location']]
            button = Inline_Keyboard.inline_c2_home(location)
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–ù–∞ —è–∫—ñ–π –ª–æ–∫–∞—Ü—ñ—ó –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å?', reply_markup=button)
        elif call.data in Sheet['Location']:  # –∫—Ä–æ–∫2 –æ–±–∏—Ä–∞—î–º–æ –ø–æ–≤–µ—Ä—Ö –∞–±–æ —Å–∫–ª–∞–¥
            await call.answer(f'–õ–æ–∫–∞—Ü—ñ—è: {call.data}')
            Reply_message[c_id]['location'] = call.data
            Floor = [i for i in Sheet['Location'][Reply_message[c_id]['location']]]
            button = Inline_Keyboard.inline_c2(Floor, 'Back')
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=Reply_message[c_id]['location'], reply_markup=button)
        elif (call.data in Sheet['Location'][Reply_message[c_id]['location']]): #–∫—Ä–æ–∫3 –æ–±–∏—Ä–∞—î–º–æ –¥—ñ–ª—å–Ω–∏—Ü—é –∞–±–æ –¥–µ–≤–∞–π—Å–∞ —è–∫—â–æ —Å–∫–ª–∞–¥
            await call.answer(call.data)
            Reply_message[c_id]['backer'] = Reply_message[c_id]['location']
            if 'non_distric' in Sheet['Location'][Reply_message[c_id]['location']][call.data]:  # —è–∫—â–æ –±–µ–∑ –ø–æ–≤–µ—Ä—Ö–∞ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ –æ–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º
                Reply_message[c_id]['floor'] = 'non_distric'
                Reply_message[c_id]['distric'] = call.data
                Reply_message[c_id]['project'] = 'non_project'
                if 'Production Warehouse' in Reply_message[c_id]['distric']:  # —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó—ó —ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫—ñ—Ç–∏ –∞–±–æ –¥–µ–≤–∞–π—Å–∏
                    button.add(
                        types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data='–î–µ–≤–∞–π—Å'),
                        types.InlineKeyboardButton(text='Kit', callback_data='Ajax_Kit')
                    )
                    button.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Reply_message[c_id]['backer']))
                else:  # –æ–±–∏—Ä–∞—î–º–æ –¥–µ–≤–∞–π—Å–∏ —è–∫—â–æ —Ü–µ —Å–∫–ª–∞–¥ –∞–±–æ —â–æ—Å—å –Ω–∞ —Ä—ñ–≤–Ω—ñ –∑ –ø–æ–≤–µ—Ä—Ö–æ–º –∞–ª–µ –Ω–µ –∫—ñ—Ç–∏
                    Device = [i for i in Sheet['Device']]
                    button = Inline_Keyboard.inline_c2(Device, Reply_message[c_id]['backer'])
            else: # –ø–æ–≤–µ—Ä—Ö
                Reply_message[c_id]['floor'] = call.data
                Distric = [i for i in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']]]
                button = Inline_Keyboard.inline_c2(Distric, Reply_message[c_id]['backer'])
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=call.data, reply_markup=button)
        elif call.data in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']]:  # –∫—Ä–æ–∫4 –æ–±–∏—Ä–∞—î–º–æ —Ä–æ–±–æ—á—ñ –º—ñ—Å—Ü—è –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–ª—å–Ω–∏—Ü—ñ
            await call.answer(call.data)
            Reply_message[c_id]['distric'] = call.data
            Reply_message[c_id]['backer'] = Reply_message[c_id]['floor']
            if Reply_message[c_id]['distric'] in Sheet['Non_place']: # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É —Ä–æ–± –º—ñ—Å—Ü—è
                Device = [i for i in Sheet['Device']]
                button = Inline_Keyboard.inline_c2(Device, Reply_message[c_id]['backer'])
            elif 'non_project' in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']][Reply_message[c_id]['distric']]:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                Reply_message[c_id]['project'] = 'non_project'
                if Reply_message[c_id]['distric'] in Sheet['Non_standart']:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —ñ —Ä–æ–± –º—ñ—Å—Ü—è
                    if 'Master' in Reply_message[c_id]['distric']:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –º–∞—Å—Ç–µ—Ä–±–æ–∫—Å —ñ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –¥–µ–≤–∞–π—Å–∏ —á–∏ –∫—ñ—Ç–∏
                        button.add(
                            types.InlineKeyboardButton(text='–î–µ–≤–∞–π—Å', callback_data='–î–µ–≤–∞–π—Å'),
                            types.InlineKeyboardButton(text='Kit', callback_data='Ajax_Kit')
                        )
                        button.add(
                            types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=Reply_message[c_id]['backer']))
                    else:
                        Device = [i for i in Sheet['Device']]
                        button = Inline_Keyboard.inline_c2(Device, Reply_message[c_id]['backer'])
                else:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∞–ª–µ –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±—ñ—Ä —Ä–æ–± –º—ñ—Å—Ü—è
                    Place = [i for i in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']][Reply_message[c_id]['distric']]['non_project']]
                    button = Inline_Keyboard.inline_c2(Place, Reply_message[c_id]['backer'])
            else:  # —è–∫—â–æ –¥—ñ–ª—å–Ω–∏—Ü—è –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–±—ñ—Ä —Ä–æ–± –º—ñ—Å—Ü—è
                Place = [i for i in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']][Reply_message[c_id]['distric']]]
                button = Inline_Keyboard.inline_c2(Place, Reply_message[c_id]['backer'])
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=call.data, reply_markup=button)
        elif call.data in Sheet['Location'][Reply_message[c_id]['location']][Reply_message[c_id]['floor']][Reply_message[c_id]['distric']]:  # –∫—Ä–æ–∫5 –æ–±–∏—Ä–∞—î–º–æ –ª—ñ–Ω—ñ–π–∫—É –¥–µ–≤–∞–π—Å—ñ–≤
            await call.answer(call.data)
            Reply_message[c_id]['backer'] = Reply_message[c_id]['distric']
            if Reply_message[c_id]['distric'] in Sheet['Room']:
                Reply_message[c_id]['room'] = call.data
                Device = [i for i in Sheet['Device']]
                button = Inline_Keyboard.inline_c2(Device, Reply_message[c_id]['backer'])
            elif Reply_message[c_id]['distric'] in Sheet['KL_line']:
                KL_line = [i for i in Sheet['KL_R_M']]
                button = Inline_Keyboard.inline_c2(KL_line, Reply_message[c_id]['backer'])
            else:


    except ZeroDivisionError:
        pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, timeout=False)
