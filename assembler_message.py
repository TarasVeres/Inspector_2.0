# —Ñ–∞–π–ª –∑–±–∏—Ä–∞–Ω–Ω—è –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫ –≤—ñ–Ω –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ

import time

import matrix


def assembler_good(c_id): # –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—è –±—É–ª–∞ –±–µ–∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π
    text = f'{time.strftime("%d.%m.%Y", time.localtime())}\n' \
           f'–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—é –Ω–∞ –ª–æ–∫–∞—Ü—ñ—ó: {c_id["location"]}'
    if 'non_district' not in c_id['floor']:
           text += f', {c_id["floor"]}'
    text += f'\n–î—ñ–ª—å–Ω–∏—Ü—è: {c_id["district"]}'
    if ('room' in c_id) and (("–ë–µ–∑ —Ä.–º." not in c_id['room']) and ("–ë–µ–∑ —Ä–æ–± –º—ñ—Å—Ü—è" not in c_id['room'])):
        text += f', {c_id["room"]}'
    text += f', –∑–º—ñ–Ω–∞ - {c_id["shift"]}\n'
    text += f'–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π –≤–∏—è–≤–ª–µ–Ω–æ –Ω–µ –±—É–ª–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç - 100%.\n' \
            f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞): {c_id["sp"]}\n'\
            f'–ü—Ä–æ–≤—ñ–≤(–ª–∞) —ñ–Ω—Å–ø–µ–∫—Ü—ñ—é: {c_id["inspector"]}\n'\
            f'–í–∏ üî•!'
    return text

def assembler_false(c_id): # –≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—è –±—É–ª–∞ –∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—è–º–∏
    text = f'{time.strftime("%d.%m.%Y", time.localtime())}\n' \
           f'–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—é –Ω–∞ –ª–æ–∫–∞—Ü—ñ—ó: {c_id["location"]}'
    if 'non_district' not in c_id['floor']:
           text += f', {c_id["floor"]}'
    text += f'\n–î—ñ–ª—å–Ω–∏—Ü—è: {c_id["district"]}'
    if ('room' in c_id) and (("–ë–µ–∑ —Ä.–º." not in c_id['room']) and ("–ë–µ–∑ —Ä–æ–± –º—ñ—Å—Ü—è" not in c_id['room'])):
        text += f', {c_id["room"]}'
    text += f', –∑–º—ñ–Ω–∞ - {c_id["shift"]}\n'
    text += f'–í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π: {matrix.count_false(c_id)}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {matrix.count_result(c_id)}%.\n' \
            f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞): {c_id["sp"]}\n' \
            f'–ü—Ä–æ–≤—ñ–≤(–ª–∞) —ñ–Ω—Å–ø–µ–∫—Ü—ñ—é: {c_id["inspector"]}\n' \
            f'–í–∏ –º–æ–∂–µ—Ç–µ –∫—Ä–∞—â–µ!'
    return text

def assembler_false_count(c_id, Request_defect): # —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—è–º–∏
    text = f'{time.strftime("%d.%m.%Y", time.localtime())}\n'
    if 'project' in c_id:
        text += f'–ü–ª–∞—Ç–∞: {c_id["project"]}\n'
    else:
        if 'kit' in c_id:
            text += f'Kit: {c_id["kit"]}\n'
        elif '–ë–µ–∑ –¥–µ–≤–∞–π—Å—É' not in c_id['device']:
            text += f'–î–µ–≤–∞–π—Å: {c_id["device"]}\n'
    text += f'–ì—Ä—É–ø–∞ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {Request_defect["output_defect_message"]}\n'\
    f'–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {Request_defect["district"]}\n'\
    f'–û–ø–∏—Å –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: {Request_defect["text"]}\n'\
    f'–ó–∞—Ñ—ñ–∫—Å—É–≤–∞–≤(–ª–∞): {c_id["inspector"]}'
    return text